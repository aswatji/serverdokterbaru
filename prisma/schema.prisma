// schema.prisma
// Generate Prisma models for consultation-based paid chat app.

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 1. User model - Patients using the consultation app
model User {
  id           String          @id @default(cuid())
  email        String          @unique
  password     String          // bcrypt hash
  fullname     String
  photo        String?
  profession   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relations
  consultations Consultation[] @relation("PatientConsultations")
  messages     Message[]
}

// 2. Doctor model - Medical professionals providing consultations
model Doctor {
  id           String           @id @default(cuid())
  fullname     String
  category     String
  university   String
  strNumber    String           @unique
  gender       String
  email        String           @unique
  password     String
  bio          String?
  photo        String?
  alamatRumahSakit String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  // Relations
  consultations Consultation[]  @relation("DoctorConsultations")
  schedules    DoctorSchedule[]
  messages     Message[]
}

// 3. DoctorSchedule model - Doctor availability schedule
model DoctorSchedule {
  id        String   @id @default(cuid())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  dayOfWeek Int      // 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday
  startTime DateTime
  endTime   DateTime
}

// 4. Payment model - Payment records (id used as Midtrans order_id)
model Payment {
  id           String        @id @default(cuid()) // Also used as Midtrans order_id
  amount       Float
  status       String        // "pending", "success", "failed"
  createdAt    DateTime      @default(now())
  
  // Relations - one-to-one with Consultation
  consultation Consultation?
}

// 5. Consultation model - Paid consultation sessions
model Consultation {
  id           String      @id @default(cuid())
  patient      User        @relation("PatientConsultations", fields: [patientId], references: [id])
  patientId    String
  doctor       Doctor      @relation("DoctorConsultations", fields: [doctorId], references: [id])
  doctorId     String
  payment      Payment?    @relation(fields: [paymentId], references: [id])
  paymentId    String?     @unique
  startedAt    DateTime    @default(now())
  expiresAt    DateTime
  isActive     Boolean     @default(true)
  
  // Relations - one-to-one with Chat
  chat         Chat?
}

// 6. Chat model - Chat room for each consultation
model Chat {
  id              String      @id @default(cuid())
  consultation    Consultation @relation(fields: [consultationId], references: [id])
  consultationId  String      @unique
  
  // Relations - one-to-many with Messages
  messages        Message[]
}

// 7. Message model - Individual chat messages
model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  sender    String   // "user" | "doctor"
  content   String
  sentAt    DateTime @default(now())
  
  // Optional relations to User and Doctor (for message attribution)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId  String?
}

// 8. News model (optional) - App news and articles
model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
}

// 9. Category model (optional) - Categories for news or other content
model Category {
  id     String  @id @default(cuid())
  name   String
  items  String?
}
// 10. Model category (optional) - Categories for dokter
model CategoryDoctor {
  id        Int      @id @default(autoincrement())
  category  String

}
