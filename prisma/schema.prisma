generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String         @id @default(cuid())
  email      String         @unique
  password   String
  createdAt  DateTime       @default(now())
  fullname   String
  photo      String?
  profession String?
  updatedAt  DateTime       @updatedAt
  chats      Chat[]         @relation("UserChats")
  ratings    DoctorRating[]
  payments   Payment[]
}

model Doctor {
  id               String           @id @default(cuid())
  bio              String?
  photo            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  fullname         String
  category         String
  university       String
  strNumber        String           @unique
  gender           String
  email            String           @unique
  password         String
  alamatRumahSakit String?
  chats            Chat[]           @relation("DoctorChats")
  ratings          DoctorRating[]
  schedules        DoctorSchedule[]
  payments         Payment[]
}

model DoctorSchedule {
  id        String   @id @default(cuid())
  doctorId  String
  dayOfWeek Int
  startTime DateTime
  endTime   DateTime
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  status    String
  createdAt DateTime @default(now())
  userId    String
  doctorId  String
  chat      Chat?
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Chat {
  id            String       @id @default(cuid())
  chatKey       String       @unique
  createdAt     DateTime     @default(now())
  doctorId      String
  userId        String
  lastMessageId String?      @unique
  paymentId     String?      @unique
  updatedAt     DateTime     @default(now()) @updatedAt
  expiredAt     DateTime?
  isActive      Boolean      @default(false)
  doctor        Doctor       @relation("DoctorChats", fields: [doctorId], references: [id])
  lastMessage   ChatMessage? @relation("LastMessageRelation", fields: [lastMessageId], references: [id])
  payment       Payment?     @relation(fields: [paymentId], references: [id])
  user          User         @relation("UserChats", fields: [userId], references: [id])
  dates         ChatDate[]

  @@unique([userId, doctorId])
}

model ChatDate {
  id        String        @id @default(cuid())
  chatId    String
  date      DateTime
  createdAt DateTime      @default(now())
  chat      Chat          @relation(fields: [chatId], references: [id])
  messages  ChatMessage[]
}

model ChatMessage {
  id              String   @id @default(cuid())
  chatDateId      String
  sender          String
  content         String
  sentAt          DateTime @default(now())
  type            String   @default("text")
  chatLastMessage Chat?    @relation("LastMessageRelation")
  chatDate        ChatDate @relation(fields: [chatDateId], references: [id])
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  image     String?
}

model Category {
  id    String  @id @default(cuid())
  name  String
  items String?
}

model CategoryDoctor {
  id       Int    @id @default(autoincrement())
  category String
}

model DoctorRating {
  id        String   @id @default(cuid())
  doctorId  String
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([doctorId, userId])
}
